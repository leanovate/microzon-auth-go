// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/leanovate/microzon-auth-go/store (interfaces: ServerStore)

package store

import (
	x509 "crypto/x509"
	gomock "github.com/golang/mock/gomock"
	common "github.com/leanovate/microzon-auth-go/common"
	time "time"
)

// Mock of ServerStore interface
type MockServerStore struct {
	ctrl     *gomock.Controller
	recorder *_MockServerStoreRecorder
}

// Recorder for MockServerStore (not exported)
type _MockServerStoreRecorder struct {
	mock *MockServerStore
}

func NewMockServerStore(ctrl *gomock.Controller) *MockServerStore {
	mock := &MockServerStore{ctrl: ctrl}
	mock.recorder = &_MockServerStoreRecorder{mock}
	return mock
}

func (_m *MockServerStore) EXPECT() *_MockServerStoreRecorder {
	return _m.recorder
}

func (_m *MockServerStore) AddCertificate(_param0 string, _param1 *x509.Certificate) error {
	ret := _m.ctrl.Call(_m, "AddCertificate", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerStoreRecorder) AddCertificate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddCertificate", arg0, arg1)
}

func (_m *MockServerStore) AddRevocation(_param0 common.RawSha256, _param1 time.Time) error {
	ret := _m.ctrl.Call(_m, "AddRevocation", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerStoreRecorder) AddRevocation(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddRevocation", arg0, arg1)
}

func (_m *MockServerStore) AllCertificates() ([]*x509.Certificate, error) {
	ret := _m.ctrl.Call(_m, "AllCertificates")
	ret0, _ := ret[0].([]*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerStoreRecorder) AllCertificates() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllCertificates")
}

func (_m *MockServerStore) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockServerStoreRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockServerStore) FindCertificate(_param0 string) (*x509.Certificate, error) {
	ret := _m.ctrl.Call(_m, "FindCertificate", _param0)
	ret0, _ := ret[0].(*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerStoreRecorder) FindCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindCertificate", arg0)
}

func (_m *MockServerStore) RemoveCertificate(_param0 string) error {
	ret := _m.ctrl.Call(_m, "RemoveCertificate", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerStoreRecorder) RemoveCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveCertificate", arg0)
}

func (_m *MockServerStore) SetRevocationsListener(_param0 common.RevocationsListener) error {
	ret := _m.ctrl.Call(_m, "SetRevocationsListener", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerStoreRecorder) SetRevocationsListener(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRevocationsListener", arg0)
}
