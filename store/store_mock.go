// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./store/store.go

package store

import (
	gomock "github.com/golang/mock/gomock"
	certificates "github.com/leanovate/microzon-auth-go/certificates"
	revokations "github.com/leanovate/microzon-auth-go/revokations"
	time "time"
)

// Mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *_MockStoreRecorder
}

// Recorder for MockStore (not exported)
type _MockStoreRecorder struct {
	mock *MockStore
}

func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &_MockStoreRecorder{mock}
	return mock
}

func (_m *MockStore) EXPECT() *_MockStoreRecorder {
	return _m.recorder
}

func (_m *MockStore) SelfCerificate() (*certificates.CertWithKey, error) {
	ret := _m.ctrl.Call(_m, "SelfCerificate")
	ret0, _ := ret[0].(*certificates.CertWithKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) SelfCerificate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SelfCerificate")
}

func (_m *MockStore) AllCertificates() ([]*certificates.CertificateVO, error) {
	ret := _m.ctrl.Call(_m, "AllCertificates")
	ret0, _ := ret[0].([]*certificates.CertificateVO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) AllCertificates() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllCertificates")
}

func (_m *MockStore) CertificateByThumbprint(x5t string) (*certificates.CertificateVO, error) {
	ret := _m.ctrl.Call(_m, "CertificateByThumbprint", x5t)
	ret0, _ := ret[0].(*certificates.CertificateVO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) CertificateByThumbprint(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CertificateByThumbprint", arg0)
}

func (_m *MockStore) AddRevokation(sha256 string, expiresAt time.Time) error {
	ret := _m.ctrl.Call(_m, "AddRevokation", sha256, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStoreRecorder) AddRevokation(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddRevokation", arg0, arg1)
}

func (_m *MockStore) ListRevokations(sinceVersion uint64) (*revokations.RevokationListVO, error) {
	ret := _m.ctrl.Call(_m, "ListRevokations", sinceVersion)
	ret0, _ := ret[0].(*revokations.RevokationListVO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStoreRecorder) ListRevokations(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRevokations", arg0)
}

func (_m *MockStore) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockStoreRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
